{"version":3,"sources":["conponents/Books/Book.js","conponents/Books/Books.js","conponents/App.js","serviceWorker.js","index.js"],"names":["Book","state","inEligible","_this2","this","update","react_default","a","createElement","className","type","value","props","book","name","onChange","e","changeHandeler","target","id","onKeyPress","key","setState","onClick","style","cursor","deletHandeler","Component","Books","_this","books","map","index","Books_Book","App","price","newBook","filter","formSubmit","event","newId","length","newBooks","el","push","alert","preventDefault","Object","objectSpread","onSubmit","placeholder","newItem","conponents_Books_Books","bind","Boolean","window","location","hostname","match","ReactDOM","render","conponents_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.17d7b7bc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Book extends Component {\r\n\r\n    state = {\r\n        inEligible: false\r\n    }\r\n\r\n    render() {\r\n\r\n        let update = this.state.inEligible ? \r\n        <input \r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            value= {this.props.book.name}\r\n            onChange={\r\n                e => this.props.changeHandeler(e.target.value, this.props.book.id)\r\n            }\r\n            onKeyPress={ e => e.key == 'Enter' ? this.setState({inEligible: false}):  this.setState({inEligible: true})\r\n            }\r\n        /> \r\n        : this.props.book.name;\r\n\r\n        return(\r\n            <li className=\"list-group-item d-flex align-items-center\">{ update } \r\n                <span className=\"ml-auto pr-3\"></span> \r\n                <i onClick={() => this.setState({inEligible: true}) } className=\"far fa-edit mr-1\" style={{cursor: 'pointer'}} ></i>\r\n                <i onClick={() => this.props.deletHandeler(this.props.book.id) } style={{cursor: 'pointer'}} className=\"far fa-trash-alt\"></i>\r\n            </li>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Book;","import React, { Component } from 'react';\r\nimport Book from './Book';\r\n\r\n\r\nclass Books extends Component {\r\n\r\n    render() {\r\n        return(\r\n            <ul className=\"list-group\">\r\n                {\r\n                    this.props.books.map((book, index) => {\r\n                        return (\r\n                            <Book key={index} deletHandeler={this.props.deletHandeler} changeHandeler={this.props.changeHandeler} book={book} />\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Books;","import React, { Component } from 'react';\n//import './App.css';\nimport Books from './Books/Books'\n\nclass App extends Component {\n\n  state = {\n    books: [\n      {\n        name: 'React',\n        id:1\n      },\n      {\n        name: 'Redux',\n        id:2\n      },\n      {\n        name: 'Javascript',\n        price: 15,\n        id:3\n      },\n      {\n        name: 'Python',\n        id:4\n      },\n    ]\n  }\n\n  deletHandeler = (id) => {\n    let newBook = this.state.books.filter(book => book.id != id)\n    this.setState({\n      books: newBook\n    })\n  }\n\n  formSubmit = (event) => {\n    if(event.target[0].value !== '') {\n      let books = this.state.books;\n      let newId;\n      if(books.length > 0) {\n        let id = books.length - 1;\n        newId = books[id].id + 1\n      } else {\n        newId = 1\n      }\n      let BookName = event.target[0].value;\n  \n      let newBook = {\n        name: BookName,\n        price: 20,\n        id: newId\n      }\n  \n      let newBooks = this.state.books.map(el => el)\n      let addNewBook = newBooks.push(newBook)\n  \n      this.setState({\n        books: newBooks\n      })\n\n      event.target[0].value = '';\n    } else {\n      alert('Field must not be empty!')\n    }\n   \n    event.preventDefault();\n    \n  }\n\n\n  changeHandeler = ( name, id ) => {\n    let newBook = this.state.books.map( book => {\n      if(id === book.id) {\n        return {\n          ...book,\n          name\n        }\n      }\n      return book\n    })\n    this.setState({\n      books: newBook\n    })\n  }\n \n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container pt-5\">\n          <form className=\"mb-5\" onSubmit={ this.formSubmit }>\n            <div className=\"form-group\">\n              <input type=\"text\" className=\"form-control\" placeholder=\"Add list items\" onChange={ this.newItem } />\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">Add Item</button>\n          </form>\n          <Books changeHandeler={ this.changeHandeler.bind(this) } deletHandeler={ this.deletHandeler.bind(this) } books={this.state.books}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './conponents/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}